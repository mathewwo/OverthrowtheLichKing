#############################################################################
# Makefile for building: hw5
# Generated by qmake (2.01a) (Qt 4.6.2) on: Thu Apr 19 02:01:33 2012
# Project:  hw5.pro
# Template: app
# Command: /usr/bin/qmake -unix -o Makefile hw5.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -I.
LINK          = g++
LFLAGS        = -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = archer.cpp \
		arrow.cpp \
		character.cpp \
		dragon.cpp \
		dragonfire.cpp \
		fireball.cpp \
		hw5.cpp \
		lava.cpp \
		lichking.cpp \
		magicfire.cpp \
		pirate.cpp \
		player.cpp \
		projectile.cpp \
		skeleton.cpp \
		sprite.cpp \
		tree.cpp moc_archer.cpp \
		moc_dragon.cpp \
		moc_hw5.cpp \
		moc_lichking.cpp \
		moc_magicfire.cpp \
		moc_pirate.cpp \
		moc_skeleton.cpp \
		moc_sprite.cpp
OBJECTS       = archer.o \
		arrow.o \
		character.o \
		dragon.o \
		dragonfire.o \
		fireball.o \
		hw5.o \
		lava.o \
		lichking.o \
		magicfire.o \
		pirate.o \
		player.o \
		projectile.o \
		skeleton.o \
		sprite.o \
		tree.o \
		moc_archer.o \
		moc_dragon.o \
		moc_hw5.o \
		moc_lichking.o \
		moc_magicfire.o \
		moc_pirate.o \
		moc_skeleton.o \
		moc_sprite.o
DIST          = /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		hw5.pro
QMAKE_TARGET  = hw5
DESTDIR       = 
TARGET        = hw5

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: hw5.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/libQtGui.prl \
		/usr/lib/libQtCore.prl
	$(QMAKE) -unix -o Makefile hw5.pro
/usr/share/qt4/mkspecs/common/g++.conf:
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/libQtGui.prl:
/usr/lib/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -unix -o Makefile hw5.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/hw51.0.0 || $(MKDIR) .tmp/hw51.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/hw51.0.0/ && $(COPY_FILE) --parents archer.h arrow.h character.h dragon.h dragonfire.h fireball.h hw5.h lava.h lichking.h magicfire.h pirate.h player.h projectile.h skeleton.h sprite.h tree.h .tmp/hw51.0.0/ && $(COPY_FILE) --parents archer.cpp arrow.cpp character.cpp dragon.cpp dragonfire.cpp fireball.cpp hw5.cpp lava.cpp lichking.cpp magicfire.cpp pirate.cpp player.cpp projectile.cpp skeleton.cpp sprite.cpp tree.cpp .tmp/hw51.0.0/ && (cd `dirname .tmp/hw51.0.0` && $(TAR) hw51.0.0.tar hw51.0.0 && $(COMPRESS) hw51.0.0.tar) && $(MOVE) `dirname .tmp/hw51.0.0`/hw51.0.0.tar.gz . && $(DEL_FILE) -r .tmp/hw51.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_archer.cpp moc_dragon.cpp moc_hw5.cpp moc_lichking.cpp moc_magicfire.cpp moc_pirate.cpp moc_skeleton.cpp moc_sprite.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_archer.cpp moc_dragon.cpp moc_hw5.cpp moc_lichking.cpp moc_magicfire.cpp moc_pirate.cpp moc_skeleton.cpp moc_sprite.cpp
moc_archer.cpp: character.h \
		archer.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) archer.h -o moc_archer.cpp

moc_dragon.cpp: character.h \
		dragon.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) dragon.h -o moc_dragon.cpp

moc_hw5.cpp: character.h \
		player.h \
		pirate.h \
		sprite.h \
		archer.h \
		tree.h \
		arrow.h \
		projectile.h \
		fireball.h \
		lava.h \
		dragon.h \
		dragonfire.h \
		lichking.h \
		magicfire.h \
		skeleton.h \
		hw5.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) hw5.h -o moc_hw5.cpp

moc_lichking.cpp: character.h \
		lichking.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) lichking.h -o moc_lichking.cpp

moc_magicfire.cpp: character.h \
		magicfire.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) magicfire.h -o moc_magicfire.cpp

moc_pirate.cpp: character.h \
		pirate.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) pirate.h -o moc_pirate.cpp

moc_skeleton.cpp: character.h \
		skeleton.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) skeleton.h -o moc_skeleton.cpp

moc_sprite.cpp: character.h \
		sprite.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) sprite.h -o moc_sprite.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

archer.o: archer.cpp archer.h \
		character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o archer.o archer.cpp

arrow.o: arrow.cpp arrow.h \
		projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o arrow.o arrow.cpp

character.o: character.cpp character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o character.o character.cpp

dragon.o: dragon.cpp dragon.h \
		character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o dragon.o dragon.cpp

dragonfire.o: dragonfire.cpp dragonfire.h \
		projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o dragonfire.o dragonfire.cpp

fireball.o: fireball.cpp fireball.h \
		projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o fireball.o fireball.cpp

hw5.o: hw5.cpp hw5.h \
		character.h \
		player.h \
		pirate.h \
		sprite.h \
		archer.h \
		tree.h \
		arrow.h \
		projectile.h \
		fireball.h \
		lava.h \
		dragon.h \
		dragonfire.h \
		lichking.h \
		magicfire.h \
		skeleton.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o hw5.o hw5.cpp

lava.o: lava.cpp lava.h \
		character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lava.o lava.cpp

lichking.o: lichking.cpp lichking.h \
		character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lichking.o lichking.cpp

magicfire.o: magicfire.cpp magicfire.h \
		character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o magicfire.o magicfire.cpp

pirate.o: pirate.cpp pirate.h \
		character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pirate.o pirate.cpp

player.o: player.cpp player.h \
		character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o player.o player.cpp

projectile.o: projectile.cpp projectile.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o projectile.o projectile.cpp

skeleton.o: skeleton.cpp skeleton.h \
		character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o skeleton.o skeleton.cpp

sprite.o: sprite.cpp sprite.h \
		character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o sprite.o sprite.cpp

tree.o: tree.cpp tree.h \
		character.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tree.o tree.cpp

moc_archer.o: moc_archer.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_archer.o moc_archer.cpp

moc_dragon.o: moc_dragon.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_dragon.o moc_dragon.cpp

moc_hw5.o: moc_hw5.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_hw5.o moc_hw5.cpp

moc_lichking.o: moc_lichking.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_lichking.o moc_lichking.cpp

moc_magicfire.o: moc_magicfire.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_magicfire.o moc_magicfire.cpp

moc_pirate.o: moc_pirate.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_pirate.o moc_pirate.cpp

moc_skeleton.o: moc_skeleton.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_skeleton.o moc_skeleton.cpp

moc_sprite.o: moc_sprite.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_sprite.o moc_sprite.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

